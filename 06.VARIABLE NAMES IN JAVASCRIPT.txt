Question 6: Explain the importance of choosing meaningful and descriptive variables names in JavsScript. Provide an example where using a clear identifier improves 		code readibility.

Answer :- Choosing meaningful and descriptive variable names in JavaScript is crucial for writing clean, readable, and maintainable code. Good variable names help 		convey the purpose and usage of the variables, making the code easier to understand for anyone reading it, including the original author when they return to 		the code after some time.

	Importance of Meaningful and Descriptive Variable Names:
		1. Readability: Clear variable names make the code easier to read and understand, reducing the cognitive load on the reader.
		2. Maintainability: Code with descriptive variable names is easier to maintain and update because the purpose of each variable is immediately apparent.
		3. Self-Documenting Code: Well-named variables can reduce the need for comments, as the code itself becomes more explanatory.
		4. Error Reduction: Meaningful names help prevent bugs by making it clear what data a variable should hold, reducing the chance of using the wrong 				variable.
		5. Collaboration: Descriptive variable names facilitate collaboration, as team members can quickly understand the code without needing extensive 				explanations.

	Example of Improved Readability with Clear Identifiers:
	Consider the following example, where ambiguous variable names make the code hard to understand:

	// Ambiguous variable names
		let a = 10;
		let b = 5;
		let c = a  b;
		console.log(c); // Outputs: 50

	In this example, it is not clear what a, b, and c represent. Renaming the variables to be more descriptive can significantly improve readability:


	// Descriptive variable names
		let length = 10; // Length of the rectangle
		let width = 5;  // Width of the rectangle
		let area = length  width; // Calculate the area of the rectangle
		console.log(area); // Outputs: 50

	In the improved example:
		- length clearly indicates that the variable represents the length of something.
		- width clearly indicates that the variable represents the width.
		- area clearly indicates that the variable stores the calculated area.

	Detailed Example:
	Here is a more complex example to illustrate the importance of meaningful variable names:

	Ambiguous Variable Names:

	function c(p, t, r) {
	    let i = (p  t  r) / 100;
	    return i;
	}

	let p = 1000;
	let t = 2;
	let r = 5;
	let interest = c(p, t, r);
	console.log(interest); // Outputs: 100

	In this example, it is not clear what the function c does, or what p, t, and r represent.

	Descriptive Variable Names:

	function calculateSimpleInterest(principal, time, rate) {
	    let interest = (principal  time  rate) / 100;
	    return interest;
	}

	let principalAmount = 1000; // Principal amount in dollars
	let timeInYears = 2; // Time in years
	let annualInterestRate = 5; // Annual interest rate in percent
	let interest = calculateSimpleInterest(principalAmount, timeInYears, annualInterestRate);
	console.log(interest); // Outputs: 100

	In the improved example:
		- calculateSimpleInterest makes it clear what the function does.
		- principalAmount, timeInYears, and annualInterestRate are descriptive and self-explanatory.
		- The variable names provide context, making the code easier to understand without additional comments.

	Best Practices for Choosing Variable Names:
		1. Use Clear and Descriptive Names: Choose names that accurately describe the variable's purpose or content.
		2. Follow Naming Conventions: Use camelCase for variables and functions, PascalCase for classes, and uppercase for constants.
		3. Avoid Abbreviations: Use full words unless the abbreviation is widely recognized.
		4. Use Contextual Names: Names should provide context about the data they store or the function they perform.
		5. Keep It Simple: While being descriptive, avoid overly long names that can make the code cumbersome.

	By adopting these practices, you can significantly improve the clarity and maintainability of your JavaScript code.