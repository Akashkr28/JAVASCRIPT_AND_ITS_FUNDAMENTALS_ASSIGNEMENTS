Question 5: Explain the importance of comments in JavaScript and provide examples of single-line and multi-line comments.

Answer :- Comments are an essential part of writing clean, maintainable, and understandable code in JavaScript. They are used to describe the purpose, functionality, 	and behavior of code, making it easier for others (and yourself) to understand and maintain the codebase in the future.

	IMPORTANCE OF COMMENTS IN JAVASCRIPT:
		1. Code Documentation: Comments provide a way to document what the code does, why certain decisions were made, and how particular parts of the code 					work.
		2. Improved Readability: They help improve the readability of the code by explaining complex logic or algorithms.
		3. Maintenance: Comments assist in maintaining the code by making it easier to identify the purpose and functionality of different sections of code 					when returning to it after some time.
		4. Collaboration: When working in a team, comments help other developers understand your code quickly, facilitating better collaboration.
		5. Debugging: Comments can be used to temporarily disable code for debugging purposes.

	TYPES OF COMMENTS IN JAVASCRIPT:

	Single-Line Comments:
		Single-line comments are used to comment out a single line of code or add a brief explanation or note. They are created using two forward slashes (//).

	Examples:

	// This is a single-line comment
	let x = 5; // Declare a variable x and assign it the value 5


	Multi-Line Comments:
		Multi-line comments are used to comment out multiple lines of code or provide detailed explanations. They start with /* and end with */.

	Examples:
	
	/*
	This is a multi-line comment
	It can span multiple lines
	and is useful for longer explanations
	or commenting out blocks of code.
	*/
	let y = 10;

	/* Declare a variable z and
	assign it the sum of x and y */
	let z = x + y;


	Practical Examples:

	Example 1: Documenting Function Purpose

	// Function to calculate the factorial of a number
	function factorial(n) {
	    // Base case: if n is 0, return 1
	    if (n === 0) {
	        return 1;
	    }
	    // Recursive case: n  factorial of (n - 1)
	    return n  factorial(n - 1);
	}


	Example 2: Explaining Complex Logic

	// Function to check if a number is prime
	function isPrime(num) {
	    // Return false for numbers less than 2
	    if (num < 2) {
	        return false;
	    }
	    /* Loop from 2 to the square root of the number
	    If the number is divisible by any number in this range,
	    it is not prime */
	    for (let i = 2; i <= Math.sqrt(num); i++) {
	        if (num % i === 0) {
	            return false;
	        }
	    }
	    // If no divisors were found, the number is prime
	    return true;
	}


	Example 3: Temporarily Disabling Code
	
	let result = 0;
	// Temporarily disable the addition code for testing
	/*
	result = x + y;
	console.log(result);
	*/
	
	// Enable only the multiplication code
	result = x  y;
	console.log(result);


	Best Practices for Writing Comments:
		1. Be Clear and Concise: Write comments that are easy to understand and to the point.
		2. Update Comments: Keep comments up-to-date with the code to avoid discrepancies.
		3. Avoid Redundancy: Do not state the obvious. Focus on explaining the why and how rather than the what.
		4. Use Comments for Intent: Explain the intention behind complex logic, algorithms, or decisions.
		5. Comment Regularly: Make it a habit to comment while coding, especially when dealing with complex or critical sections of the code.

	By incorporating comments effectively, you can make your JavaScript code more maintainable, understandable, and easier to debug and collaborate on.